#!/usr/bin/env pinpoint

[fill]
[black]
[center]
[text-align=center]
[font=Sans 70px]
[running-late-overlay.png]

-- [running-late.png]

<span size="large" weight="heavy">Better late than never</span>
Integrating Selenium after the fact

<span size="xx-small">R. Tyler Croy
tyler@linux.com</span>

# Hello and thanks for coming. I'm R. Tyler Croy and I'm going to talk a bit
# this evening about the integrating Selenium and browser testing after you've
# already built out a mature web application
#
# Before I get to the good stuff, first let me explain who I am and why I'm
# qualified :)

-- [lookout_frontdesk.jpg] [right]

<b>I work here</b>

-- [terminal_ruby.png]

<b>Hacking with Ruby</b>

# Most of my work is in Ruby, while Lookout's flagship product is an
# application for the Android platform, the vast majority of our code is all
# server-side Ruby code.
#
# For my team specifically, we're responsible for Lookout's web presence, which
# is a lot of Ruby on Rails (for better or worst)

--

I am not in QA

--

(<i>so why do I care?</i>)

--

Quality is <b>important</b>

# Quality is important for a lot of reasons, in Lookout's case a fundamental
# part of user trust is reliability in my opinion.
#
# If a user loses their phone, visits mylookout.com to try to find the phone
# and our site breaks, they're going to be pretty pissed.
#
# Automating the quality of the app is also pretty important IMHO to ensuring
# that we as a team can move forward and focus on building new things instead
# of trying to make sure that all the old stuff doesn't fall over

--

# Talk about the "state of Lookout" when this project started around a year ago

--

<b>Challenges</b>

-- [white]

Browser test suite

-- [white]

Browser testing infrastructure

# This is a picture of our browser testing infrastructure when we started
#
# We had absolutely nothing in place, this means we had no machines to run browsers, our build machines were all simple Linux VMs
#
# Fortunately we did have some amount of automation hooks exposed for creating
# accounts on a staging server and manipulating/scaffolding up "state" on a
# server

--

Unit Test-Driven Team

# The team, was very familiar with using TDD. Not so much with ATDD. 
# Even so, the tests that were typically being
# written were almost *entirely* unit tests, with a thin veneer of
# integration/high-level tests being written
#
# Need to mention the difference between unit tests (for developers)
# and acceptance testing (from the user perspective

--

Lack of experience

# We also had a pretty major lack of experience in browser or higher-level
# automated acceptance testing throughout the company

--

Directionless

# Because of this lack of experience we had a lot of uncertainty and doubt with
# regards to the right direction to start to build a test suite and testing
# infrastructure for.
#
# I personally had some experience from working with @admc at Slide on this
# very kind of project, which was ultimately an abyssmal failure. We used
# Windmill and created very brittle tests, only written by QA engineers,
# tied the tests very close to the page driver itself and ended up writing very
# "unit-test-style" methods/test cases such as "def
# test_page_does_display_alert_when_clicking_thing" with tens of lines of
# browser calls in them

--

# So that's where we started from, it was scary.

--

# I'm going to try to avoid being overly prescriptive, I'm certainly
# opinionated but I just want to make sure I focus more on what has and has not
# worked for me at Lookout and a bit at the failed project at Slide

-- [bad-idea.jpg]

# QA should not own selenium testing

-- [good-idea.jpg]

# Selenium testing should be moved as much into the app developer workflow as
# possible.



-- [bad-idea.jpg]

# Binding together the starting of a local server running the application, with
# the running of the tests is a *bad idea*.
#
# This will really hurt your ability to run many tests in parallel, but also
# can increase overhead for every single test case, especially as tasks such as
# rebuilding the DB, or factorying up data grows.


-- [good-idea.jpg]

# It is a *good idea* to make sure running against a local test server works
# seamlessly. In fact, ensuring that by default tests run against a local
# server is fine for development, but for CI and full test runs, it's important
# that the tests are capable of hitting remote staging or test environments.


-- [bad-idea.jpg]

# Use the exact same tool that you write your unit test code in

-- [font=monospace 70px] [text-align=left] [left]

class PurchaseTest < Test::Unit::TestCase
  include SeleniumHelper

  def test_valid_credit_card_purchase
    # ...
  end

  def test_fat_fingered_credit_card_information
    user = create_user
    driver.nagivate.to('/purchase')
    cc_elem = driver.find_element('input#credit_card')
    cc_elem.send_keys(8008)
    button = driver.find_element('input#purchase')
    button.submit
  end

  def test_d2p_for_already_existing_account
    # ...
  end
end

# The tool isn't designed for the job, it also encourages developers and
# testers to write terrible tests because they're not breaking out of the scope
# of a unit test and thinking about things from the "outside"

-- [bad-idea.jpg]

# Use Selenese. Does everybody here know what Selenese is? It's an
# "interesting" langauge that the Selenium IDE records into, that is totally
# brittle, unmaintainable and write-once read never for your development and QE
# team
#
# Here's one of the shortest examples I could find in our git log of some
# terrible Selenese that was created long ago


-- [font=monospace 50px] [text-align=left] [left]

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://selenium-ide.openqa.org/profiles/test-case">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="selenium.base" href="http://localhost:3000/" />
<title>login</title>
</head>
<body>
<table cellpadding="1" cellspacing="1" border="1">
<thead>
<tr><td rowspan="1" colspan="3">login</td></tr>
</thead><tbody>
<tr>
       <td>open</td>
       <td>/</td>
       <td></td>
</tr>
<tr>
       <td>clickAndWait</td>
       <td>link=LOGIN</td>
       <td></td>
</tr>
<tr>
       <td>type</td>
       <td>id=user_email</td>
       <td>test@example.com</td>
</tr>
<tr>
       <td>type</td>
       <td>id=user_password</td>
       <td>testthis</td>
</tr>
<tr>
       <td>clickAndWait</td>
       <td>name=login</td>
       <td></td>
</tr>
<tr>
       <td>clickAndWait</td>
       <td>link=Logout</td>
       <td></td>
</tr>

</tbody></table>
</body>
</html>

-- [good-idea.jpg]

# Use tooling better suited for acceptance or integration testing, such as
# Cucumber, JBehave, etc


-- [bad-idea.jpg]

# Bad Idea: Using Cucumber *incorrectly* is almost as bad as not using Cucumber
# at all.

-- [font=monospace 70px] [text-align=left] [left]

Scenario: Free users can locate and scream
  Given I am a free user
   When I visit the login page
    And I enter my password
    And I enter my email
   When I click on the "Login" button
   Then I click on the "Missing Device" link
   Then I should see the "Locate" link
    And I should see the "Scream" link

# There's literally no benefit to using Cucumber if this is how you're writing
# scenarios. This just becomes another layer of useless indirection
#
# Mention the issues with internationalization


-- [good-idea.jpg]

# Using Cucumber is a great idea, in my opinion, for creating a focus on
# Acceptance Test Driven development. The structure of it, and the separation
# from the code itself can really help developers think and communicate in the
# abstract for a given task or feature.

-- [font=monospace 70px] [text-align=left] [left]


Scenario: Free users should have locate/scream capability

  Users that are either in trial or in the free account state
  should always be able to locate and scream from the non-mobile
  version of the web site

  Given I am a logged in free user
   When I visit the "Missing Device" page
   Then I should be able to locate my phone
    And I should be able to scream my phone

-- [bad-idea.jpg]

# Use the Selenium WebDriver API directly

-- [font=monospace 70px] [text-align=left] [left]

  @driver.navigate.to(url_for(:controller => 'user', :action => 'login))

  email_field = @driver.find_element(:name => 'login[user]')
  # Make sure we found it!
  email_field.should_not be_nil
  email_field.send_keys(user.email)

  pass_field = @driver.find_element(:name => 'login[password'])
  pass_field.should_not be_nil
  pass_field.send_keys(user.password)

  button = @driver.find_element(:name => 'login')
  button.should_not be_nil
  button.submit

-- [good-idea.jpg]

# Use Capybara, if you're a Ruby developer

-- [font=monospace 70px] [text-align=left] [left]

  # Visit our Login page
  visit url_for(:controller => 'user', :action => 'login')

  # Log in!
  fill_in "login[user]", :with => user.email
  fill_in "login[password]", :with => user.password
  click_on 'Log in'

-- [good-idea.jpg]

# Build an automation library or layer that the Cucumber step definitions can
# talk to.

-- [font=monospace 70px] [text-align=left] [left]

Given /^I am a logged in (free|pro) user$/ do |type|
  # Call our automation API
  user = create_user(type.to_sym)

  # Visit our Login page
  visit url_for(:controller => 'user', :action => 'login')

  # Log in!
  fill_in "login[user]", :with => user.email
  fill_in "login[password]", :with => user.password
  click_on 'Log in'
end

-- [font=monospace 70px] [text-align=left] [left]

Given /^I am a logged in (free|pro) user$/ do |type|
  # Call our automation API
  user = create_user(type.to_sym)

  # Call our automation API to login
  login_with(user)
end


-- [bad-idea.jpg]

# Re-use step definitions within other step definitions

-- [font=monospace 70px] [text-align=left] [left]

Given /^I am a logged in free user$/ do
  Given %{I am a free user}
  Given %{I am logged in to the site}
end

-- [bad-idea.jpg]

# Spent time and money setting up a local selenium grid or other testing
# infrastructure before getting the company bought into browser testing


-- [good-idea.jpg]

# Use hosted or managed services such as Sauce Labs to get started with testing
# multiple browser versions very quickly



-- [bad-idea.jpg]

# Run all automated tests against a single host.


-- [good-idea.jpg]

# Set up multiple staging or testing environments, ideally those in some sort
# of elastic cloud such as EC2, OpenStack, etc


-- [bad-idea.jpg]

# Save test-writing for the absolute last step before deployment, putting a lot
# of pressure on the QA team but also incentivizing taking shortcuts and not
# writing tests at all!
#
# Tests written as an "after thought" are bound to be more hacky and can not
# help weed out product or UX issues early enough to stop bugs before they
# happen

-- [good-idea.jpg]

# Start writing scenarios, or outlining acceptance tests at the top of the
# "product funnel" to make sure that the team can agree/understand what's being
# built and why.

-- [bad-idea.jpg]

# Rely on Selenium to test/validate all potential behaviors of your front-end
# code. It's much more time-efficient to write unit tests for JS in Jasmine
# than running the appropriate Selenium test cases to exercise varying
# invocations of JavaScript functions

-- [good-idea.jpg]

# Write unit-tests for your JavaScript code using Jasmine, QUnit, etc to ensure
# that the front-end application works well.

--

-- [good-idea.jpg]

# Integrating Selenium testing with CI is a great idea, and very important to
# ensuring the success of the browser testing project and adoption at the
# company.
#
# Talk a bit about the Jenkins set up for Selenium at Lookout

--

# The Selenium work at Lookout is far from perfect, and far from complete. We
# rapidly back-filled our test coverage which was a mixed blessing. We got a
# lot of coverage fast, but it varies in quality of test from feature to
# feature and in some cases browser to browser.
#
# Where we have had the best results in our tests have been in incorporating
# them as much as possible with the actual development of the product feature
# itself.

--

<b>Questions?</b>

--

Thanks
